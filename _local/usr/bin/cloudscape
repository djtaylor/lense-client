#!/usr/bin/python
import os
import re
import sys
import json
import argparse
import importlib

# CloudScape Libraries
from cloudscape.common.vars import C_CLIENT
from cloudscape.client.manager import APIConnect
from cloudscape.common.utils import format_action

class CLIClient(object):
    """
    CloudScape Client Interface
    
    The following is a class designed to handle command line interactions
    with the API client.
    """
    def __init__(self):
        
        # API connection attributes
        self.api     = self._api_env()
    
        # API client and connection parameters
        self.client  = None
        self.connect = None
    
        # Supported API client modules
        self.modules = {}
    
        # Arguments parser and object
        self.ap      = None
        self.args    = None 
    
        # Parse CLI arguments
        self._parse_args()
    
    def _api_env(self):
        """
        Look for API connection environment variables.
        """
        
        # Look for the following environment variables
        api_env = {
            'user':  'CS_API_USER',
            'key':   'CS_API_KEY',
            'group': 'CS_API_GROUP'
        }
        
        # Return the API connection attributes
        api_ret = {}
        
        for k,v in api_env.iteritems():
            if v in os.environ:
                api_ret[k] = os.environ[v] 
        return api_ret
    
    def _api_connect(self):
        self.client, self.connect = APIConnect(user=self.api['user'], group=self.api['group'], api_key=self.api['key']).construct()
    
        # If token retrieval/connection failed
        if not self.client:
            response = self.connect['body']
            try:
                response = json.loads(self.connect['body'])['error']
            except:
                pass
            print 'HTTP %s: %s' % (self.connect['code'], response)
            sys.exit(1)
    
    def _parse_args(self):
      
        # Create a new argument parsing object and populate the arguments
        self.ap = argparse.ArgumentParser(description=self._return_help(), formatter_class=argparse.RawTextHelpFormatter)
        self.ap.add_argument('module', help=self._return_modules())
        self.ap.add_argument('action', nargs='?', help="The action to perform against the endpoint", action='append')
        self.ap.add_argument('-u', '--api-user', help='The API user to authenticate with if not set as the environment variable "CS_API_USER"', action='append')
        self.ap.add_argument('-g', '--api-group', help='The API user group to authenticate with if not set as the environment variable "CS_API_GROUP"', action='append')
        self.ap.add_argument('-k', '--api-key', help='The API key to authenticate with if not set as the environment variable "CS_API_KEY"', action='append')
        self.ap.add_argument('-d', '--api-data', help='Optional data to pass during the API request', action='append')
        self.ap.add_argument('-l', '--list', help='Show supported actions for a specified module', action='store_true')
      
        # Parse CLI arguments
        sys.argv.pop(0)
        self.args = vars(self.ap.parse_args(sys.argv))

    def _return_help(self):
         return ("CloudScape Client\n\n"
                 "A utility designed to handle interactions with the CloudScape API client manager.\n"
                 "Supports most of the API endpoints available.\n")
    
    def _return_modules(self):
        """
        Return a list of supported module arguments.
        """
        
        # Modules help menu
        modules = ''
        
        # Load the client module mapper
        mmap  = '%s/mapper.json' % C_CLIENT
        mjson = json.load(open(mmap))
        mbase = mjson['base']
        
        # Process each module definition
        for mod in mjson['modules']:
            self.modules[mod['id']] = []
            
            # Load the supported module actions
            api_mod = '%s.%s' % (mbase, mod['module'])
            
            # Load the API endpoint handler
            ep_mod   = importlib.import_module(api_mod)
            ep_class = getattr(ep_mod, mod['class'])
            for attr in dir(ep_class):
                if not re.match(r'^__.*$', attr):
                    self.modules[mod['id']].append(attr)
            
            # Add the module to the help menu
            modules += format_action(mod['id'], mod['desc'])
        return modules
    
    def handler(self):
        """
        Handle any command line arguments.
        """
        
        # Make sure the required authentication parameters are set
        if not 'user' in self.api:
            if not 'api_user' in self.args:
                print 'API user not found in environment variables or as an argument'
                sys.exit(1)
            else:
                self.api['user'] = self.args['api_user']
        if not 'group' in self.api:
            if not 'api_group' in self.args:
                print 'API user group not found in environment variables or as an argument'
                sys.exit(1)
            else:
                self.api['group'] = self.args['api_group']
        if not 'key' in self.api:
            if not 'api_key' in self.args:
                print 'API key not found in environment variables or as an argument'
                sys.exit(1)
            else:
                self.api['key'] = self.args['api_user']
        
        # Establish the API connection
        self._api_connect()
        
        # Process the module argument
        if self.args['module'] in self.modules:
            if self.args['action'][0] in self.modules[self.args['module']]:
                
                # Get the client module method
                mod = getattr(self.client, self.args['module'])
                act = getattr(mod, self.args['action'][0])
                
                # If submitting extra data
                if self.args['api_data']:
                    response = act(json.loads(self.args['api_data'][0]))
                else:
                    response = act()
                
                # Print the response
                print 'HTTP %s: %s' % (response['code'], response['body'])
                
            # No valid action found
            else:
                
                # If listing supported actions
                if self.args['list']:
                    print '\nSupported actions for module "%s":\n' % self.args['module']
                    for a in self.modules[self.args['module']]:
                        print '> %s' % a
                    print ''
                    sys.exit(0)
                else:
                    self.ap.print_help()
                    print '\nUnsupported module action "%s"' % self.args['action']
                    print 'Supported actions are: %s\n' % json.dumps(self.modules[self.args['module']])
                    sys.exit(1)
        else:
            self.ap.print_help()
            print '\nUnsupported module argument "%s"\n' % self.args['module']
            sys.exit(1)
    
# Handle command line arguments
if __name__ == '__main__':
    CLIClient().handler()